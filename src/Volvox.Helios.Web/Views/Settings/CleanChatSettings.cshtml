@model Volvox.Helios.Web.ViewModels.Settings.CleanChatSettingsViewModel
@{
    ViewData["Title"] = "Clean chat settings";
}

<h2>@ViewData["Title"]</h2>
<hr>

<form method="post" class="col-12">
    <div asp-validation-summary="All" class="text-danger"></div>

    <div class="row border border-gray2 rounded">
        <div class="col-md-9 pt-3 pb-3">
            <h4>Enabled</h4>
            <p class="mb-0 text-volvox">
                Enables the clean chat module.
            </p>
        </div>
        <div class="col-md-3 valign">
            <div class="btn-group material-btn-group ml-md-auto mb-3 mb-md-0">
                <label for="enabledBtn" class="btn pr-4 pl-4 module-enabler @(Model.Enabled ? "active" : "disabled")">
                    On
                    <input id="enabledBtn" type="radio" name="Enabled" class="d-none" value="true" @(Model.Enabled ? "checked" : "")>
                </label>
                <label for="disabledBtn" class="btn pr-4 pl-4 module-enabler @(Model.Enabled ? "disabled" : "active")">
                    Off
                    <input id="disabledBtn" type="radio" name="Enabled" class="d-none" value="false" @(Model.Enabled ? "" : "checked")>
                </label>
            </div>
        </div>
    </div>

    <div class="row mt-4 border border-gray2 rounded">
        <div class="col-12 pt-3 pb-3">
            <h4>Channels</h4>
            <p class="mb-0 text-volvox">
                Select the channel where this module should be enabled.
            </p>
            <hr />
            <select asp-for="CleanChatChannels" class="d-none channel-items" multiple></select>
            <div id="channelTagBox" class="mt-3" style="overflow: hidden;"></div>
        </div>
    </div>

    <div class="row mt-4 border border-gray2 rounded">
        <div class="col-12 pt-3 pb-3">
            <h4>Message Duration</h4>
            <p class="mb-0 text-volvox">
                Change the message duration for the chat messages until they get removed.
            </p>
            <hr />
            <label asp-for="MessageDuration">Message Duration (minutes)</label>
            <input type="number" asp-for="MessageDuration" value="@(Model.MessageDuration)" min="0" class="form-control material-input" />
            <span asp-validation-for="MessageDuration" class="text-danger"></span>
        </div>
    </div>

    <div class="row mt-4">
        <span asp-validation-summary="Enabled" class="text-danger"></span>
        <div class="ml-auto">
            <button type="submit" class="btn btn-volvox-outline pr-4 pl-4" style="border-radius:20px;">Save</button>
        </div>
    </div>

</form>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        $('.module-enabler input:not(".active")').click((e) => {
            $(e.currentTarget).parent().parent().find('.active').toggleClass('active disabled');
            $(e.currentTarget).parent().toggleClass('active disabled');
        });

        $.ajax({
            url: '/api/GetGuildChannels',
            method: "GET",
            data: {
                guildId: '@Model.GuildId'
            },
            success: function (data) {
                $('#channelTagBox').dxTagBox({
                    dataSource: data,
                    valueExpr: "id",
                    displayExpr: "name",
                    value: @(Html.Raw(Json.Serialize(Model.CleanChatChannels))).map((e) => {
                        var channel = data.filter((c) => {
                            return c.value == e;
                        });
                        return channel[0].value;
                    }),
                    onInitialized: (e) => {
                        setTimeout(() => {
                                $('.channel-items').append($('.dx-dropdowneditor-input-wrapper').find('select option'));
                            },
                            500);
                    },
                    onValueChanged: (e) => {
                        $('.channel-items').empty().append($('.dx-dropdowneditor-input-wrapper').find('select option'));
                    }
                });

            }
        });
        
    </script>
}