@model Volvox.Helios.Web.ViewModels.Settings.StreamerSettingsViewModel
@{
    ViewData["Title"] = "Streamer Module Settings";
}

<h2>@ViewData["Title"]</h2>
<hr />

<div class="row">
    <div class="col-md-12">
        <form method="post">
            <div class="col-12">
                <div class="row border border-gray2 rounded">
                    <div class="col-md-9 pt-3 pb-3">
                        <h4>Remembot Module</h4>
                        <p class="mb-0 text-volvox">
                            Completely manage all reminders for your bot.
                        </p>
                    </div>
                    <div class="col-md-3 valign">
                        <div class="btn-group material-btn-group ml-md-auto mt-md-0 mt-3">
                            <label for="enabledBtn" class="btn pr-4 pl-4 @(Model.Enabled ? "active" : "border-gray2 bg-white text-gray2")">
                                On
                                <input id="enabledBtn" type="radio" name="Enabled" class="d-none" value="true">
                            </label>
                            <label for="disabledBtn" class="btn pr-4 pl-4 @(Model.Enabled ? "border-gray2 bg-white text-gray2" : "active")">
                                Off
                                <input id="disabledBtn" type="radio" name="Enabled" class="d-none" value="false">
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            
            <div asp-validation-summary="All" class="text-danger"></div>

            <h4>Stream Announcer</h4>
            <div class="form-group">
                <label asp-for="ChannelId"></label>
                <select asp-for="ChannelId" asp-items="Model.Channels" id="channels" class="form-control"></select>
                <span asp-validation-for="ChannelId" class="text-danger"></span>
            </div>
            <div class="form-check form-group">
                <input asp-for="ChannelSettings.Enabled" class="form-check-input" />
                <label asp-for="ChannelSettings.Enabled" class="form-check-label"></label>
                <span asp-validation-for="ChannelSettings.Enabled" class="text-danger"></span>
            </div>
            <div class="form-check form-group">
                <input asp-for="ChannelSettings.RemoveMessages" class="form-check-input" />
                <label asp-for="ChannelSettings.RemoveMessages" class="form-check-label"></label>
                <span asp-validation-for="ChannelSettings.RemoveMessages" class="text-danger"></span>
            </div>

            <hr />

            <h4>Streamer Role</h4>
            <div class="form-check form-group">
                <input asp-for="StreamerRoleEnabled" class="form-check-input" />
                <label asp-for="StreamerRoleEnabled" class="form-check-label"></label>
                <span asp-validation-for="StreamerRoleEnabled" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="RoleId"></label>
                <select asp-for="RoleId" asp-items="Model.Roles" id="roles" class="form-control"></select>
                <span asp-validation-for="RoleId" class="text-danger"></span>
            </div>

            <div class="col-12">
                <div class="row mt-4">
                    <span asp-validation-summary="Enabled" class="text-danger"></span>
                    <div class="ml-auto">
                        <button type="submit" class="btn btn-volvox-outline pr-4 pl-4" style="border-radius:20px;">Save</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }

    <script>
        getChannelSettingsAnnouncer = function(guildId, channelId) {
            const url = `/api/GetChannelSettingsAnnouncer?guildId=${guildId}&channelId=${channelId}`;
            return $.ajax({
                type: 'GET',
                cache: false,
                url: url
            }).done(function(response) {
                return response;
            });
        };

        $("#channels").on('change',
            function() {
                const channelId = $('#channels').val();
                const guildId = '@Model.GuildId';

                $.when(getChannelSettingsAnnouncer(guildId, channelId)).done(function(response) {
                    $('#ChannelSettings_Enabled').prop('checked', response.enabled);
                    $('#ChannelSettings_RemoveMessages').prop('checked', response.removeMessages);
                });
            });

        $('input:not(".active")').click((e) => {
            $(e.currentTarget).parent().parent().find('.active').toggleClass('active border-gray2 bg-white text-gray2');
            $(e.currentTarget).parent().toggleClass('active border-gray2 bg-white text-gray2');
        });
    </script>
}